// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace PlanningSystem.Data
{
    public partial class POAPP001Context : DbContext
    {
        public POAPP001Context()
        {
        }

        public POAPP001Context(DbContextOptions<POAPP001Context> options)
            : base(options)
        {
        }

        public virtual DbSet<AccessmentSimulation> AccessmentSimulation { get; set; }
        public virtual DbSet<ConfirmedStat> ConfirmedStat { get; set; }
        public virtual DbSet<CreditDetail> CreditDetail { get; set; }
        public virtual DbSet<CreditRuleDetail> CreditRuleDetail { get; set; }
        public virtual DbSet<CreditRuleHead> CreditRuleHead { get; set; }
        public virtual DbSet<CustAssessResultTable> CustAssessResultTable { get; set; }
        public virtual DbSet<Factor> Factor { get; set; }
        public virtual DbSet<PlanDetail> PlanDetail { get; set; }
        public virtual DbSet<PlanHead> PlanHead { get; set; }
        public virtual DbSet<SalesTeam> SalesTeam { get; set; }
        public virtual DbSet<TierPlanDetail> TierPlanDetail { get; set; }
        public virtual DbSet<TierPlanHead> TierPlanHead { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<AccessmentSimulation>(entity =>
            {
                entity.HasKey(e => e.Simulationid);

                entity.ToTable("AccessmentSimulation", "Customer");

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Createdby)
                    .HasColumnName("createdby")
                    .HasMaxLength(15);

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(15);

                entity.Property(e => e.Modifieddate)
                    .HasColumnName("modifieddate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SimulationName).HasMaxLength(50);

                entity.Property(e => e.TargetDate).HasColumnType("date");
            });

            modelBuilder.Entity<ConfirmedStat>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Simulid, e.TargetDate });

                entity.ToTable("ConfirmedStat", "Customer");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Simulid).HasColumnName("SIMULID");

                entity.Property(e => e.TargetDate).HasColumnType("date");

                entity.Property(e => e.CountOfcust).HasColumnName("CountOFCust");

                entity.Property(e => e.CustProp).HasMaxLength(100);

                entity.Property(e => e.SalesAmount).HasMaxLength(100);

                entity.Property(e => e.SalesProp).HasMaxLength(100);

                entity.Property(e => e.Tier)
                    .HasColumnName("TIER")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Tierid).HasColumnName("TIERID");
            });

            modelBuilder.Entity<CreditDetail>(entity =>
            {
                entity.HasKey(e => new { e.Ruleid, e.CustCode });

                entity.ToTable("CreditDetail", "Customer");

                entity.Property(e => e.CustCode).HasMaxLength(50);

                entity.Property(e => e.AltArratio)
                    .HasColumnName("AltARRatio")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AltarratioPoint).HasColumnName("altarratio_point");

                entity.Property(e => e.BounceCntYear).HasColumnName("BounceCnt_year");

                entity.Property(e => e.BounceCntYearPoint).HasColumnName("BounceCnt_year_Point");

                entity.Property(e => e.PayTerm).HasMaxLength(50);

                entity.Property(e => e.ReturnAvgMonth)
                    .HasColumnName("ReturnAvg_month")
                    .HasColumnType("money");

                entity.Property(e => e.ReturnAvgPoint).HasColumnName("ReturnAvg_Point");
            });

            modelBuilder.Entity<CreditRuleDetail>(entity =>
            {
                entity.HasKey(e => new { e.Detailid, e.Ruleid });

                entity.ToTable("CreditRuleDetail", "Customer");

                entity.Property(e => e.Detailid).ValueGeneratedOnAdd();

                entity.Property(e => e.Altarratio)
                    .HasColumnName("ALTARRatio")
                    .HasMaxLength(100);

                entity.Property(e => e.AltarratioPoint).HasColumnName("ALTARRatioPoint");

                entity.Property(e => e.Bounce).HasMaxLength(100);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Return).HasMaxLength(100);

                entity.HasOne(d => d.Rule)
                    .WithMany(p => p.CreditRuleDetail)
                    .HasForeignKey(d => d.Ruleid)
                    .HasConstraintName("FK_RULE_HEADID");
            });

            modelBuilder.Entity<CreditRuleHead>(entity =>
            {
                entity.HasKey(e => e.Ruleid)
                    .HasName("PK_CreditRuleid");

                entity.ToTable("CreditRuleHead", "Customer");

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Createdby)
                    .HasColumnName("createdby")
                    .HasMaxLength(15);

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(15);

                entity.Property(e => e.Modifieddate)
                    .HasColumnName("modifieddate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RuleContent).HasColumnType("ntext");

                entity.Property(e => e.Rulename).HasMaxLength(50);
            });

            modelBuilder.Entity<CustAssessResultTable>(entity =>
            {
                entity.HasKey(e => new { e.Resultid, e.TargetDate, e.CustCode });

                entity.ToTable("CustAssessResultTable", "Customer");

                entity.Property(e => e.Resultid).HasColumnName("resultid");

                entity.Property(e => e.TargetDate).HasColumnType("date");

                entity.Property(e => e.CustCode).HasMaxLength(35);

                entity.Property(e => e.Axtier)
                    .HasColumnName("AXTier")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ChainName).HasMaxLength(60);

                entity.Property(e => e.CountryRegionId)
                    .IsRequired()
                    .HasMaxLength(35);

                entity.Property(e => e.CreatDate).HasColumnType("datetime");

                entity.Property(e => e.CustName)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.Custfirstyear)
                    .HasColumnName("custfirstyear")
                    .HasColumnType("money");

                entity.Property(e => e.Custgradeid).HasColumnName("custgradeid");

                entity.Property(e => e.Custgroup)
                    .IsRequired()
                    .HasColumnName("custgroup")
                    .HasMaxLength(35);

                entity.Property(e => e.Customercategory2)
                    .IsRequired()
                    .HasColumnName("customercategory2")
                    .HasMaxLength(15);

                entity.Property(e => e.Custsecondyear)
                    .HasColumnName("custsecondyear")
                    .HasColumnType("money");

                entity.Property(e => e.EmpCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasMaxLength(75);

                entity.Property(e => e.FinalTier)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FirstYearSalesAmt)
                    .HasColumnName("FirstYearSalesAMT")
                    .HasColumnType("money");

                entity.Property(e => e.Reason)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SalesReason)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SalesRequestTier)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SalesTeamId).HasColumnName("SalesTeamID");

                entity.Property(e => e.SecondYearSalesAmt)
                    .HasColumnName("SecondYearSalesAMT")
                    .HasColumnType("money");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("state")
                    .HasMaxLength(35);

                entity.Property(e => e.SuggestTier)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Tier)
                    .HasColumnName("TIER")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TwoYearSalesAmt)
                    .HasColumnName("TwoYearSalesAMT")
                    .HasColumnType("money");

                entity.Property(e => e.UsingAvg)
                    .HasColumnName("UsingAVG")
                    .HasColumnType("money");

                entity.Property(e => e.UsingCustavg)
                    .HasColumnName("UsingCUSTAVG")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<Factor>(entity =>
            {
                entity.ToTable("Factor", "Customer");

                entity.Property(e => e.Factorid).HasColumnName("factorid");

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Createdby)
                    .HasColumnName("createdby")
                    .HasMaxLength(15);

                entity.Property(e => e.Facotrdescription)
                    .HasColumnName("facotrdescription")
                    .HasColumnType("ntext");

                entity.Property(e => e.Factorname)
                    .HasColumnName("factorname")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(15);

                entity.Property(e => e.Modifieddate)
                    .HasColumnName("modifieddate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<PlanDetail>(entity =>
            {
                entity.HasKey(e => new { e.PlanDetailid, e.PlanHeadid, e.Factorid });

                entity.ToTable("PlanDetail", "Customer");

                entity.Property(e => e.PlanDetailid).ValueGeneratedOnAdd();

                entity.Property(e => e.PlanHeadid).HasColumnName("planHeadid");

                entity.Property(e => e.Factorid).HasColumnName("factorid");

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Factordescription)
                    .HasColumnName("factordescription")
                    .HasColumnType("text");

                entity.Property(e => e.Factorname)
                    .IsRequired()
                    .HasColumnName("factorname")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<PlanHead>(entity =>
            {
                entity.HasKey(e => e.Planid);

                entity.ToTable("PlanHead", "Customer");

                entity.Property(e => e.Planid).HasColumnName("planid");

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Createdby)
                    .HasColumnName("createdby")
                    .HasMaxLength(15);

                entity.Property(e => e.Factorcount).HasColumnName("factorcount");

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(15);

                entity.Property(e => e.Modifieddate)
                    .HasColumnName("modifieddate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Plandescription)
                    .HasColumnName("plandescription")
                    .HasColumnType("ntext");

                entity.Property(e => e.Planname)
                    .HasColumnName("planname")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SalesTeam>(entity =>
            {
                entity.HasKey(e => e.TeamId);

                entity.ToTable("SalesTeam", "Customer");

                entity.Property(e => e.SalesTeamId)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TierPlanDetail>(entity =>
            {
                entity.HasKey(e => new { e.Tierdetailid, e.Tierplanid });

                entity.ToTable("TierPlanDetail", "Customer");

                entity.Property(e => e.Tierdetailid)
                    .HasColumnName("tierdetailid")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tierplanid).HasColumnName("tierplanid");

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Creditscorerule)
                    .HasColumnName("creditscorerule")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Salesamountrule).HasColumnName("salesamountrule");

                entity.Property(e => e.Tierid).HasColumnName("tierid");

                entity.Property(e => e.Tiername)
                    .HasColumnName("tiername")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<TierPlanHead>(entity =>
            {
                entity.HasKey(e => e.Tierplanid);

                entity.ToTable("TierPlanHead", "Customer");

                entity.Property(e => e.Tierplanid).HasColumnName("tierplanid");

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Createdby)
                    .HasColumnName("createdby")
                    .HasMaxLength(15);

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("modifiedby")
                    .HasMaxLength(15);

                entity.Property(e => e.Modifieddate)
                    .HasColumnName("modifieddate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Tiercount).HasColumnName("tiercount");

                entity.Property(e => e.Tierplandescription)
                    .HasColumnName("tierplandescription")
                    .HasColumnType("ntext");

                entity.Property(e => e.Tierplanname)
                    .HasColumnName("tierplanname")
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}